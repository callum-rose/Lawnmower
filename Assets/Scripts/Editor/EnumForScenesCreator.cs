#if UNITY_EDITOR
using Sirenix.OdinInspector;
using Sirenix.OdinInspector.Editor;
using System.Text;
using UnityEngine;
using System.IO;
using UnityEditor;

namespace Core
{
    internal class EnumForScenesCreatorWindow : OdinEditorWindow
    {
        [SerializeField, FolderPath(AbsolutePath = true)] public string savePath;
        [SerializeField] public string _nameSpace;

        private const string MenuPath = "Callum/" + nameof(EnumForScenesCreatorWindow);
        private const string EnumName = "UnityScene";

        private const string SavePathKey = nameof(EnumForScenesCreatorWindow) + "_savePath";
        private const string DefaultPath = @"C:/Users/callu/Documents/GitHub/Lawnmower/Assets/Scripts/Core";

        private const string NameSpaceKey = nameof(EnumForScenesCreatorWindow) + "_namespace";
        private const string DefaultNS = "Core";

        private static EnumForScenesCreatorWindow _currentWindow;

        [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.AfterAssembliesLoaded)]
        private static void Init()
        {
            EditorBuildSettings.sceneListChanged += EditorBuildSettings_sceneListChanged;

            if (!EditorPrefs.HasKey(SavePathKey))
            {
                EditorPrefs.SetString(SavePathKey, DefaultPath);
            }
            if (!EditorPrefs.HasKey(NameSpaceKey))
            {
                EditorPrefs.SetString(NameSpaceKey, DefaultNS);
            }

            Debug.Log("init");
        }

        private static void EditorBuildSettings_sceneListChanged()
        {
            string savePath = EditorPrefs.GetString(SavePathKey, DefaultPath);
            string nameSpace = EditorPrefs.GetString(NameSpaceKey, DefaultNS);
            Create(savePath, nameSpace);
        }

        [MenuItem(MenuPath)]
        private static void CreateWindow()
        {
            _currentWindow = CreateWindow<EnumForScenesCreatorWindow>();
            _currentWindow.savePath = EditorPrefs.GetString(SavePathKey, DefaultPath);
            _currentWindow._nameSpace = EditorPrefs.GetString(NameSpaceKey, DefaultNS);
        }

        [Button("Generate")]
        private void ButtonCreate()
        {
            EditorPrefs.SetString(SavePathKey, savePath);
            EditorPrefs.SetString(NameSpaceKey, _nameSpace);
            Create(savePath, _nameSpace);
        }

        private static void Create(string savePath, string nameSpace)
        {
            StringBuilder sb = new StringBuilder();

            sb.Append($"// Code generated by {nameof(EnumForScenesCreatorWindow)}.cs. Use menu item \"{MenuPath}\" to update\n\n");

            if (nameSpace != null)
            {
                sb.Append("namespace " + nameSpace + "\n{\n");
            }

            sb.Append("public enum " + EnumName + "\n{\n");

            sb.Append("None = -1,\n");

            for (int i = 0; i < EditorBuildSettings.scenes.Length; i++)
            {
                EditorBuildSettingsScene scene = EditorBuildSettings.scenes[i];
                string name = AssetDatabase.LoadAssetAtPath<SceneAsset>(AssetDatabase.GUIDToAssetPath(scene.guid.ToString())).name;

                if (string.IsNullOrEmpty(name))
                {
                    continue;
                }

                name = name.Replace(' ', '_');

                sb.Append(name + " = " + i + ",\n");
            }

            sb.Append("}\n");

            if (nameSpace != null)
            {
                sb.Append("}");
            }

            string filePath = savePath + "/" + EnumName + ".cs";

            if (File.Exists(filePath))
            {
                File.Delete(filePath);
            }

            using (FileStream stream = File.Create(filePath))
            {
                byte[] bytes = Encoding.UTF8.GetBytes(sb.ToString());
                stream.Write(bytes, 0, bytes.Length);
            }

            AssetDatabase.SaveAssets();
            AssetDatabase.Refresh();

            EditorUtility.FocusProjectWindow();

            Debug.Log("Generated new enum at " + filePath);

            _currentWindow.Close();
        }
    }
}
#endif
